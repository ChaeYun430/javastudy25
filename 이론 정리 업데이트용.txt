244~257

패키지
(패키지의 물리적인 형태는 파일 시스템의 폴더이다)
패키지는 단순히 파일 시스템의 폴더 기능만 하는 것은 아니라 클래스의 일부분으로 식별자 역할을 한다.
클래스 이름이 동일 하더라도 패키지가 다르면 다른 클래스로 인식한다.

패키지는 클래스를 컴파일 하는 과정에서 자동적으로 (이클립스) 생성되는 폴더이다.
컴파일러는 클래스에 포함 되어 있는 패키지 선언을 보고, 파일 시스템의 폴더로 자동생성 시킨다.

패키지 이름 생성 규칙
숫자로 시작해서는 안되고, _$를 제외한 특수문자를 사용해서는 안됨
java로 시작하는 패키지는 표준 API에서 사용하므로 금지어
모두 소문자로 작성하는 것이 관례

실무에서는 회사들 간에 패키지가 서로 중복되지 않도록 흔히 회사의 도메인 이름으로 패키지를 만든다.
회사의 인터넷 도메인은 서로 중복되지 않도록 검증되어 있기 때문이다.
도메인 이름으로 패키지 이름을 만들 경우, 도메인 이름 역순으로 패키지 이름을 지어주는데. 그 이유는 포괄적인 이름이 상위 패키지가 되도록 하기 위해서 이다. 
그리고 마지막에는 프로젝트 이름을 붙여 주는 것이 관례

import문
다른 패키지에 속하는 클래스를 사용 방법
패키지와 클래스를 모두 기술

import문을 선언하여 클래스를 호출
클래스명 변수 = new 클래스명(); -> ctrl+ shift + o (ctrl + spacebar)

*는 여러 클래스가 같은 패키지에 있을 경우 포괄적으로 선언할 수 있다.
패키지명별로 import 선언이 아니라 *로 통합 구현 하려면 Number of imports needed for .*을 1로 변경하면 1개만 사용하여 import문이 완성된다.

동일한 패키지에 있는 클래스를 호출하면 import문이 명시적으로 나타나지 않는다. 
패키지가 다른 동일한 클래스를 호출하면 1개만 import되고 나머지는 패키지와 클래스명을 모두 기술한다. 



접근제한자
클래스
default 접근 제한
public 접근 제한
인터넷으로 배포되는 라이브러리 클래스들도 모두 public 접근 제한을 가지고 있다.

생성자
자동으로 생성되는 기본 생성자의 접근 제한은 클래스의 접근 제한과 동일 하다.
public : 
protected : 같은 패키지에 속하는 클래스에서 생성자를 호출
default : 
private : 

필드와 메서드
4가지

Getter와 Setter 메소드
무결성(Integrity):  데이터가 의도하지 않게 변경되거나 손상되지 않고, 정확하고 일관성 있게 유지되는 것
객체의 데이터를 외부에서 마음대로 읽고 변경할 경우 객체의 무결성이 깨질 수 있다. 
Setter
메소드를 통해 데이터를 변경하는 방법
메소드는 매개값을 검증해서 유효한 값만 데이터로 저장 할 수 있다.
Getter
외부에서 객체의 데이터를 읽을 때
객체 외부에서 객체의 필드값을 사용하기에 부적절한 경우.
메소드로 필드 값을 가공한 후 외부로 전달하면 된다.


필드 타입이 boolean일 경우 Getter는, is로 시작하는 것이 관례 이다.

Source 메뉴에서 Generate Getter and Setter를 선택하고 필드에 대한 체크를 진행한다.
만약 외부에서 필드 값을 읽을 수 만 있고, 변경하지 못하도록 하려면(읽기 전용) Getter메소드만 선언해도 좋고, Setter를 private 접근 제한을 갖도록 선언해도 좋다.(회원가입의 id 부분)

